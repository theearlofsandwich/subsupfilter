<?php

function subsupfilter_menu()
{
  $items = array();

  $items['admin/config/system/subsupfilter'] = array(
    'title' => 'Sub Sup Filter',
    'description' => 'Configuration for Sub Sup Filter module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('subsupfilter_form'),
    'access arguments' => array('administer subsupfilter theme'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'subsupfilter.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_element_info_alter().
 */
function subsupfilter_element_info_alter(&$types) {
  foreach ($types as $type => &$info) {
    $info += array('#pre_render' => array());
    array_unshift($info['#pre_render'], 'subsupfilter_pre_render');
  }
}

/**
 * #pre_render callback for any element.
 */
function subsupfilter_pre_render($element) {
  foreach (array('#title', '#description', '#markup') as $property) {
    if (isset($element[$property])) {
      $element[$property] = subsupfilter_filter_process($element[$property]);
    }
  }
  return $element;
}

/**
 * Implements hook_filter_info().
 */
function subsupfilter_filter_info() {
  $filters['subsupfilter'] = array(
    'title' => t('Sub Sup Filter'),
    'description' => t('Wraps certain words with sup and sub tags'),
    'process callback' => 'subsupfilter_filter_process',
//    'settings callback' => 'subsupfilter_filter_settings',
    'default settings' => array(
      'subsupfilter_display_tip' => 1,
    ),
    'tips callback' => 'subsupfilter_filter_tips',
  );
  return $filters;
}

/**
 * Filter settings callback for Pirate filter.
 */
//function subsupfilter_filter_settings($form, $form_state, $filter, $format, $defaults) {
//  $settings['subsupfilter_display_tip'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Display Pirate filter tip'),
//    '#default_value' => isset($filter->settings['pirate_display_tip']) ? $filter->settings['pirate_display_tip'] : $defaults['pirate_display_tip'],
//    '#description' => t('In case you want to make it a surprise on September 19th that pirates have taken over your site.'),
//  );
//  return $settings;
//}

/**
 * Implements hook_captain().
 */
function subsupfilter_converter($patterns) {

  $filterwords = variable_get('filterwords');
  $filterwordsList = explode("\n",$filterwords);

  $subsupfilter_patterns = array();

  foreach($filterwordsList as $filterword) {
    if($filterword !== "") {
      $filterSplit = explode(',', $filterword);

      $subsupfilter_patterns[$filterSplit[0]] = $filterSplit[1];

    }
  }

//  $subsupfilter_patterns = array(
//    '%\bco2\b%i' => 'CO<sub>2</sub>',
//    '%\bh2o\b%i' => 'H<sub>2</sub>O',
//    '%\bn2\b%i' => 'N<sub>2</sub>',
//    '%\bh2\b%i' => 'H<sub>2</sub>',
//    '%\bo2\b%i' => 'O<sub>2</sub>',
//  );
  return array_merge($subsupfilter_patterns, $patterns);
}

/**
 * Filter process callback for Pirate filter.
 */
function subsupfilter_filter_process($text) {
  // Allow others to alter our patterns.
  // Cache must be flushed for invocations of this hook to be felt.
  $patterns = array();
  $patterns = module_invoke_all('converter', $patterns);

  // Most of the following code is taken from Drupal core's Filter module
  // in order to exclude text within tags, such as URLs that might get 
  // modified using the replacement patterns.
  $ignore_tags = 'a|script|style|code|pre';
  $open_tag = '';
  $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
  foreach ($patterns as $pattern_search => $pattern_replace) {
    $chunk_type = 'text';
    for ($i = 0; $i < count($chunks); $i++) {
      if ($chunk_type == 'text') {
        // Only process this text if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
        // If there is a match, inject a link into this chunk via the callback
        // function contained in $task.
          $chunks[$i] = preg_replace($pattern_search, $pattern_replace, $chunks[$i]);
        }
        // Text chunk is done, so next chunk must be a tag.
        $chunk_type = 'tag';
      }
      else {
        // Only process this tag if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
        // Check whether this tag is contained in $ignore_tags.
          if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
            $open_tag = $matches[1];
          }
        }
        // Otherwise, check whether this is the closing tag for $open_tag.
        else {
          if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
            $open_tag = '';
          }
        }
        // Tag chunk is done, so next chunk must be text.
        $chunk_type = 'text';
      }
    }
    $text = implode($chunks);
  }
  return $text;
}

/**
 * Filter tips callback for Pirate filter.
 */
function subsupfilter_filter_tips($filter, $format, $long = FALSE) {
  if ($filter->settings['subsupfilter_display_tip']) {
    return t('Wraps certain text in sub and sup tags');
  }
}
